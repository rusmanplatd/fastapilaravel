from __future__ import annotations

import argparse
import json
import sys
from typing import List, Dict, Any, Optional
from datetime import datetime, timezone

from app.Console.Commands.BaseCommand import BaseCommand
from app.Models import Role, Permission, User
from app.Services.RoleService import RoleService
from app.Services.PermissionService import PermissionService
from app.Services.RoleHierarchyService import RoleHierarchyService
from app.Services.PermissionCacheService import PermissionCacheService
from app.Http.Schemas import RoleCreate, PermissionCreate


class RolePermissionCommand(BaseCommand):
    """Command for managing roles and permissions."""
    
    name = "rbac"
    description = "Manage roles and permissions"
    
    def configure_parser(self, parser: argparse.ArgumentParser) -> None:
        """Configure the argument parser."""
        subparsers = parser.add_subparsers(dest='action', help='Available actions')\n        
        # Role management commands
        role_parser = subparsers.add_parser('role', help='Role management commands')\n        role_subparsers = role_parser.add_subparsers(dest='role_action', help='Role actions')\n        \n        # Create role\n        create_role_parser = role_subparsers.add_parser('create', help='Create a new role')\n        create_role_parser.add_argument('name', help='Role name')\n        create_role_parser.add_argument('--slug', help='Role slug (auto-generated if not provided)')\n        create_role_parser.add_argument('--description', help='Role description')\n        create_role_parser.add_argument('--guard', default='api', help='Guard name')\n        create_role_parser.add_argument('--parent', help='Parent role name for hierarchy')\n        create_role_parser.add_argument('--priority', type=int, default=1, help='Role priority')\n        create_role_parser.add_argument('--max-users', type=int, help='Maximum users for this role')\n        create_role_parser.add_argument('--expires', help='Expiration date (YYYY-MM-DD)')\n        create_role_parser.add_argument('--system', action='store_true', help='Mark as system role')\n        create_role_parser.add_argument('--default', action='store_true', help='Set as default role')\n        \n        # List roles\n        list_roles_parser = role_subparsers.add_parser('list', help='List all roles')\n        list_roles_parser.add_argument('--inactive', action='store_true', help='Include inactive roles')\n        list_roles_parser.add_argument('--hierarchy', action='store_true', help='Show hierarchy')\n        list_roles_parser.add_argument('--format', choices=['table', 'json'], default='table', help='Output format')\n        \n        # Update role\n        update_role_parser = role_subparsers.add_parser('update', help='Update a role')\n        update_role_parser.add_argument('name', help='Role name to update')\n        update_role_parser.add_argument('--new-name', help='New role name')\n        update_role_parser.add_argument('--description', help='New description')\n        update_role_parser.add_argument('--parent', help='New parent role name')\n        update_role_parser.add_argument('--activate', action='store_true', help='Activate role')\n        update_role_parser.add_argument('--deactivate', action='store_true', help='Deactivate role')\n        \n        # Delete role\n        delete_role_parser = role_subparsers.add_parser('delete', help='Delete a role')\n        delete_role_parser.add_argument('name', help='Role name to delete')\n        delete_role_parser.add_argument('--force', action='store_true', help='Force deletion even if assigned to users')\n        \n        # Assign permission to role\n        assign_perm_parser = role_subparsers.add_parser('assign-permission', help='Assign permission to role')\n        assign_perm_parser.add_argument('role_name', help='Role name')\n        assign_perm_parser.add_argument('permission_name', help='Permission name')\n        \n        # Revoke permission from role\n        revoke_perm_parser = role_subparsers.add_parser('revoke-permission', help='Revoke permission from role')\n        revoke_perm_parser.add_argument('role_name', help='Role name')\n        revoke_perm_parser.add_argument('permission_name', help='Permission name')\n        \n        # Permission management commands\n        perm_parser = subparsers.add_parser('permission', help='Permission management commands')\n        perm_subparsers = perm_parser.add_subparsers(dest='permission_action', help='Permission actions')\n        \n        # Create permission\n        create_perm_parser = perm_subparsers.add_parser('create', help='Create a new permission')\n        create_perm_parser.add_argument('name', help='Permission name')\n        create_perm_parser.add_argument('--slug', help='Permission slug (auto-generated if not provided)')\n        create_perm_parser.add_argument('--description', help='Permission description')\n        create_perm_parser.add_argument('--category', default='general', help='Permission category')\n        create_perm_parser.add_argument('--action', help='Permission action')\n        create_perm_parser.add_argument('--resource', help='Resource type')\n        create_perm_parser.add_argument('--dangerous', action='store_true', help='Mark as dangerous')\n        create_perm_parser.add_argument('--mfa', action='store_true', help='Require MFA')\n        create_perm_parser.add_argument('--wildcard', action='store_true', help='Wildcard permission')\n        create_perm_parser.add_argument('--pattern', help='Wildcard pattern')\n        \n        # List permissions\n        list_perms_parser = perm_subparsers.add_parser('list', help='List all permissions')\n        list_perms_parser.add_argument('--category', help='Filter by category')\n        list_perms_parser.add_argument('--dangerous', action='store_true', help='Show only dangerous permissions')\n        list_perms_parser.add_argument('--format', choices=['table', 'json'], default='table', help='Output format')\n        \n        # User role/permission management\n        user_parser = subparsers.add_parser('user', help='User role/permission management')\n        user_subparsers = user_parser.add_subparsers(dest='user_action', help='User actions')\n        \n        # Assign role to user\n        assign_role_parser = user_subparsers.add_parser('assign-role', help='Assign role to user')\n        assign_role_parser.add_argument('email', help='User email')\n        assign_role_parser.add_argument('role_name', help='Role name')\n        \n        # Remove role from user\n        remove_role_parser = user_subparsers.add_parser('remove-role', help='Remove role from user')\n        remove_role_parser.add_argument('email', help='User email')\n        remove_role_parser.add_argument('role_name', help='Role name')\n        \n        # Show user permissions\n        show_user_parser = user_subparsers.add_parser('show', help='Show user roles and permissions')\n        show_user_parser.add_argument('email', help='User email')\n        show_user_parser.add_argument('--format', choices=['table', 'json'], default='table', help='Output format')\n        \n        # Utility commands\n        util_parser = subparsers.add_parser('util', help='Utility commands')\n        util_subparsers = util_parser.add_subparsers(dest='util_action', help='Utility actions')\n        \n        # Cache management\n        cache_parser = util_subparsers.add_parser('cache', help='Cache management')\n        cache_subparsers = cache_parser.add_subparsers(dest='cache_action', help='Cache actions')\n        \n        cache_subparsers.add_parser('clear', help='Clear all permission cache')\n        cache_subparsers.add_parser('stats', help='Show cache statistics')\n        \n        warm_parser = cache_subparsers.add_parser('warm', help='Warm up cache')\n        warm_parser.add_argument('--users', nargs='+', help='User IDs to warm')\n        warm_parser.add_argument('--roles', nargs='+', help='Role IDs to warm')\n        \n        # Hierarchy validation\n        hierarchy_parser = util_subparsers.add_parser('validate', help='Validate role hierarchy')\n        hierarchy_parser.add_argument('--fix', action='store_true', help='Attempt to fix issues')\n        \n        # Import/Export\n        import_parser = util_subparsers.add_parser('import', help='Import roles and permissions')\n        import_parser.add_argument('file', help='JSON file to import')\n        import_parser.add_argument('--dry-run', action='store_true', help='Show what would be imported')\n        \n        export_parser = util_subparsers.add_parser('export', help='Export roles and permissions')\n        export_parser.add_argument('file', help='Output JSON file')\n        export_parser.add_argument('--include-users', action='store_true', help='Include user assignments')\n    \n    def handle(self) -> int:\n        \"\"\"Handle the command execution.\"\"\"\n        try:\n            if self.args.action == 'role':\n                return self._handle_role_commands()\n            elif self.args.action == 'permission':\n                return self._handle_permission_commands()\n            elif self.args.action == 'user':\n                return self._handle_user_commands()\n            elif self.args.action == 'util':\n                return self._handle_utility_commands()\n            else:\n                self.error(\"Please specify an action (role, permission, user, util)\")\n                return 1\n        except Exception as e:\n            self.error(f\"Command failed: {str(e)}\")\n            return 1\n    \n    def _handle_role_commands(self) -> int:\n        \"\"\"Handle role management commands.\"\"\"\n        role_service = RoleService(self.db)\n        \n        if self.args.role_action == 'create':\n            return self._create_role(role_service)\n        elif self.args.role_action == 'list':\n            return self._list_roles(role_service)\n        elif self.args.role_action == 'update':\n            return self._update_role(role_service)\n        elif self.args.role_action == 'delete':\n            return self._delete_role(role_service)\n        elif self.args.role_action == 'assign-permission':\n            return self._assign_permission_to_role(role_service)\n        elif self.args.role_action == 'revoke-permission':\n            return self._revoke_permission_from_role(role_service)\n        else:\n            self.error(\"Please specify a role action\")\n            return 1\n    \n    def _handle_permission_commands(self) -> int:\n        \"\"\"Handle permission management commands.\"\"\"\n        perm_service = PermissionService(self.db)\n        \n        if self.args.permission_action == 'create':\n            return self._create_permission(perm_service)\n        elif self.args.permission_action == 'list':\n            return self._list_permissions(perm_service)\n        else:\n            self.error(\"Please specify a permission action\")\n            return 1\n    \n    def _handle_user_commands(self) -> int:\n        \"\"\"Handle user role/permission commands.\"\"\"\n        role_service = RoleService(self.db)\n        perm_service = PermissionService(self.db)\n        \n        if self.args.user_action == 'assign-role':\n            return self._assign_role_to_user(role_service)\n        elif self.args.user_action == 'remove-role':\n            return self._remove_role_from_user(role_service)\n        elif self.args.user_action == 'show':\n            return self._show_user_permissions(perm_service)\n        else:\n            self.error(\"Please specify a user action\")\n            return 1\n    \n    def _handle_utility_commands(self) -> int:\n        \"\"\"Handle utility commands.\"\"\"\n        if self.args.util_action == 'cache':\n            return self._handle_cache_commands()\n        elif self.args.util_action == 'validate':\n            return self._validate_hierarchy()\n        elif self.args.util_action == 'import':\n            return self._import_data()\n        elif self.args.util_action == 'export':\n            return self._export_data()\n        else:\n            self.error(\"Please specify a utility action\")\n            return 1\n    \n    def _create_role(self, role_service: RoleService) -> int:\n        \"\"\"Create a new role.\"\"\"\n        slug = self.args.slug or self.args.name.lower().replace(' ', '-')\n        \n        # Parse expiration date\n        expires_at = None\n        if self.args.expires:\n            try:\n                expires_at = datetime.strptime(self.args.expires, '%Y-%m-%d')\n            except ValueError:\n                self.error(\"Invalid date format. Use YYYY-MM-DD\")\n                return 1\n        \n        role_data = RoleCreate(\n            name=self.args.name,\n            slug=slug,\n            description=self.args.description,\n            guard_name=self.args.guard,\n            is_default=self.args.default,\n            role_type=\"system\" if self.args.system else \"standard\",\n            priority=self.args.priority,\n            max_users=self.args.max_users,\n            expires_at=expires_at,\n            is_system=self.args.system\n        )\n        \n        success, message, role = role_service.create_role(role_data)\n        \n        if success:\n            self.success(f\"Role '{self.args.name}' created successfully\")\n            \n            # Set parent if specified\n            if self.args.parent and role:\n                hierarchy_service = RoleHierarchyService(self.db)\n                parent_role = role_service.get_role_by_name(self.args.parent)\n                if parent_role:\n                    hierarchy_success, hierarchy_message = hierarchy_service.create_role_hierarchy(parent_role, role)\n                    if hierarchy_success:\n                        self.info(f\"Set parent role to '{self.args.parent}'\")\n                    else:\n                        self.warning(f\"Failed to set parent role: {hierarchy_message}\")\n                else:\n                    self.warning(f\"Parent role '{self.args.parent}' not found\")\n            \n            return 0\n        else:\n            self.error(f\"Failed to create role: {message}\")\n            return 1\n    \n    def _list_roles(self, role_service: RoleService) -> int:\n        \"\"\"List all roles.\"\"\"\n        roles = role_service.get_all_roles(active_only=not self.args.inactive)\n        \n        if self.args.format == 'json':\n            role_data = [role.to_dict_safe() for role in roles]\n            print(json.dumps(role_data, indent=2, default=str))\n        else:\n            if self.args.hierarchy:\n                self._print_role_hierarchy()\n            else:\n                self._print_roles_table(roles)\n        \n        return 0\n    \n    def _print_role_hierarchy(self) -> None:\n        \"\"\"Print roles in hierarchy format.\"\"\"\n        hierarchy_service = RoleHierarchyService(self.db)\n        tree = hierarchy_service.get_role_tree()\n        \n        def print_tree_node(node: Dict[str, Any], level: int = 0) -> None:\n            indent = \"  \" * level\n            role = node[\"role\"]\n            status = \"✓\" if role[\"is_active\"] else \"✗\"\n            print(f\"{indent}{status} {role['name']} ({role['user_count']} users, {role['permission_count']} perms)\")\n            \n            for child in node[\"children\"]:\n                print_tree_node(child, level + 1)\n        \n        self.info(\"Role Hierarchy:\")\n        for root_node in tree:\n            print_tree_node(root_node)\n    \n    def _print_roles_table(self, roles: List[Role]) -> None:\n        \"\"\"Print roles in table format.\"\"\"\n        if not roles:\n            self.info(\"No roles found\")\n            return\n        \n        # Print header\n        print(f\"{'Name':<20} {'Slug':<20} {'Active':<8} {'Users':<8} {'Permissions':<12} {'Type':<10}\")\n        print(\"-\" * 80)\n        \n        # Print rows\n        for role in roles:\n            active = \"Yes\" if role.is_active else \"No\"\n            print(f\"{role.name:<20} {role.slug:<20} {active:<8} {role.user_count:<8} {role.permission_count:<12} {role.role_type:<10}\")\n    \n    def _create_permission(self, perm_service: PermissionService) -> int:\n        \"\"\"Create a new permission.\"\"\"\n        slug = self.args.slug or self.args.name.lower().replace(' ', '-').replace('.', '-')\n        \n        # Parse permission name for components if not explicitly provided\n        if not self.args.action:\n            components = Permission.parse_permission_name(self.args.name)\n            action = components['action']\n        else:\n            action = self.args.action\n        \n        perm_data = PermissionCreate(\n            name=self.args.name,\n            slug=slug,\n            description=self.args.description,\n            category=self.args.category,\n            action=action,\n            resource_type=self.args.resource,\n            is_dangerous=self.args.dangerous,\n            requires_mfa=self.args.mfa,\n            is_wildcard=self.args.wildcard,\n            pattern=self.args.pattern\n        )\n        \n        success, message, permission = perm_service.create_permission(perm_data)\n        \n        if success:\n            self.success(f\"Permission '{self.args.name}' created successfully\")\n            return 0\n        else:\n            self.error(f\"Failed to create permission: {message}\")\n            return 1\n    \n    def _list_permissions(self, perm_service: PermissionService) -> int:\n        \"\"\"List all permissions.\"\"\"\n        permissions = perm_service.get_all_permissions()\n        \n        # Filter by category if specified\n        if self.args.category:\n            permissions = [p for p in permissions if p.category == self.args.category]\n        \n        # Filter dangerous permissions if specified\n        if self.args.dangerous:\n            permissions = [p for p in permissions if p.is_dangerous]\n        \n        if self.args.format == 'json':\n            perm_data = [perm.to_dict_safe() for perm in permissions]\n            print(json.dumps(perm_data, indent=2, default=str))\n        else:\n            self._print_permissions_table(permissions)\n        \n        return 0\n    \n    def _print_permissions_table(self, permissions: List[Permission]) -> None:\n        \"\"\"Print permissions in table format.\"\"\"\n        if not permissions:\n            self.info(\"No permissions found\")\n            return\n        \n        # Print header\n        print(f\"{'Name':<30} {'Category':<15} {'Action':<15} {'Roles':<8} {'Users':<8} {'Dangerous':<10}\")\n        print(\"-\" * 90)\n        \n        # Print rows\n        for perm in permissions:\n            dangerous = \"Yes\" if perm.is_dangerous else \"No\"\n            print(f\"{perm.name:<30} {perm.category:<15} {perm.action:<15} {perm.role_count:<8} {perm.user_count:<8} {dangerous:<10}\")\n    \n    def _handle_cache_commands(self) -> int:\n        \"\"\"Handle cache management commands.\"\"\"\n        cache_service = PermissionCacheService(self.db)\n        \n        if self.args.cache_action == 'clear':\n            cache_service.clear_all_cache()\n            self.success(\"Cache cleared successfully\")\n            return 0\n        \n        elif self.args.cache_action == 'stats':\n            stats = cache_service.get_cache_statistics()\n            print(json.dumps(stats, indent=2))\n            return 0\n        \n        elif self.args.cache_action == 'warm':\n            user_ids = [int(uid) for uid in self.args.users] if self.args.users else []\n            role_ids = [int(rid) for rid in self.args.roles] if self.args.roles else []\n            \n            # Warm cache synchronously for command\n            if user_ids:\n                for user_id in user_ids:\n                    user = self.db.query(User).filter(User.id == user_id).first()\n                    if user:\n                        cache_service.warm_cache_for_user(user)\n                        self.info(f\"Warmed cache for user {user_id}\")\n            \n            if role_ids:\n                for role_id in role_ids:\n                    role = self.db.query(Role).filter(Role.id == role_id).first()\n                    if role:\n                        cache_service.warm_cache_for_role(role)\n                        self.info(f\"Warmed cache for role {role_id}\")\n            \n            self.success(\"Cache warming completed\")\n            return 0\n        \n        else:\n            self.error(\"Please specify a cache action\")\n            return 1\n    \n    def _validate_hierarchy(self) -> int:\n        \"\"\"Validate role hierarchy integrity.\"\"\"\n        hierarchy_service = RoleHierarchyService(self.db)\n        issues = hierarchy_service.validate_hierarchy_integrity()\n        \n        if not issues:\n            self.success(\"Role hierarchy is valid\")\n            return 0\n        \n        self.warning(f\"Found {len(issues)} hierarchy issues:\")\n        for issue in issues:\n            print(f\"  - {issue['type']}: {issue['message']} (Role: {issue['role_name']})\")\n        \n        if self.args.fix:\n            success, message, fixes = hierarchy_service.fix_hierarchy_integrity()\n            if success:\n                self.success(f\"Applied fixes: {message}\")\n                for fix in fixes:\n                    print(f\"  - {fix}\")\n                return 0\n            else:\n                self.error(f\"Failed to fix issues: {message}\")\n                return 1\n        else:\n            self.info(\"Use --fix to attempt automatic repair\")\n            return 1\n    \n    def _assign_role_to_user(self, role_service: RoleService) -> int:\n        \"\"\"Assign role to user.\"\"\"\n        user = self.db.query(User).filter(User.email == self.args.email).first()\n        if not user:\n            self.error(f\"User with email '{self.args.email}' not found\")\n            return 1\n        \n        role = role_service.get_role_by_name(self.args.role_name)\n        if not role:\n            self.error(f\"Role '{self.args.role_name}' not found\")\n            return 1\n        \n        success, message = role_service.assign_role_to_user(user, role)\n        \n        if success:\n            self.success(f\"Role '{self.args.role_name}' assigned to user '{self.args.email}'\")\n            return 0\n        else:\n            self.error(f\"Failed to assign role: {message}\")\n            return 1\n    \n    def _show_user_permissions(self, perm_service: PermissionService) -> int:\n        \"\"\"Show user roles and permissions.\"\"\"\n        user = self.db.query(User).filter(User.email == self.args.email).first()\n        if not user:\n            self.error(f\"User with email '{self.args.email}' not found\")\n            return 1\n        \n        user_permissions = perm_service.get_user_permissions(user)\n        \n        if self.args.format == 'json':\n            # Convert permission objects to dicts for JSON serialization\n            data = {\n                \"user\": user.to_dict_safe(),\n                \"roles\": [role.name for role in user.roles],\n                \"direct_permissions\": [perm.name for perm in user_permissions[\"direct_permissions\"]],\n                \"role_permissions\": [perm.name for perm in user_permissions[\"role_permissions\"]],\n                \"total_permissions\": len(user_permissions[\"all_permissions\"])\n            }\n            print(json.dumps(data, indent=2, default=str))\n        else:\n            print(f\"\\nUser: {user.name} ({user.email})\")\n            print(f\"Status: {'Active' if user.is_active else 'Inactive'}\")\n            print(f\"\\nRoles ({len(user.roles)}):\")\n            for role in user.roles:\n                status = \"✓\" if role.is_active else \"✗\"\n                print(f\"  {status} {role.name}\")\n            \n            print(f\"\\nDirect Permissions ({len(user_permissions['direct_permissions'])}):\")\n            for perm in user_permissions[\"direct_permissions\"]:\n                print(f\"  - {perm.name}\")\n            \n            print(f\"\\nRole Permissions ({len(user_permissions['role_permissions'])}):\")\n            for perm in user_permissions[\"role_permissions\"]:\n                print(f\"  - {perm.name}\")\n            \n            print(f\"\\nTotal Effective Permissions: {len(user_permissions['all_permissions'])}\")\n        \n        return 0\n\n\n__all__ = [\"RolePermissionCommand\"]