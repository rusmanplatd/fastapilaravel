from __future__ import annotations

from typing import Any, Dict, List, Optional, Union, AsyncIterator
import asyncio


class Redis:
    def __init__(self, **kwargs: Any) -> None: ...
    
    def get(self, key: str) -> Optional[bytes]: ...
    def set(self, key: str, value: Any, ex: Optional[int] = None) -> bool: ...
    def delete(self, *keys: str) -> int: ...
    def exists(self, *keys: str) -> int: ...
    def keys(self, pattern: str = "*") -> List[bytes]: ...
    def flushall(self) -> bool: ...
    def close(self) -> None: ...


class ConnectionPool:
    def __init__(self, **kwargs: Any) -> None: ...


def from_url(url: str, **kwargs: Any) -> Redis: ...


class AsyncRedis:
    def __init__(self, **kwargs: Any) -> None: ...
    
    async def get(self, key: str) -> Optional[bytes]: ...
    async def set(self, key: str, value: Any, ex: Optional[int] = None) -> bool: ...
    async def delete(self, *keys: str) -> int: ...
    async def exists(self, *keys: str) -> int: ...
    async def keys(self, pattern: str = "*") -> List[bytes]: ...
    async def flushall(self) -> bool: ...
    async def close(self) -> None: ...


class AsyncConnectionPool:
    def __init__(self, **kwargs: Any) -> None: ...


def async_from_url(url: str, **kwargs: Any) -> AsyncRedis: ...