from typing import Any, TypeVar, Generic, Optional, List, Union
from sqlalchemy import Column

T = TypeVar('T')

class Query(Generic[T]):
    def filter(self, *args: Any) -> Query[T]: ...
    def order_by(self, *args: Any) -> Query[T]: ...
    def join(self, *args: Any) -> Query[T]: ...
    def group_by(self, *args: Any) -> Query[T]: ...
    def having(self, *args: Any) -> Query[T]: ...
    def limit(self, limit: int) -> Query[T]: ...
    def offset(self, offset: int) -> Query[T]: ...
    def options(self, *args: Any) -> Query[T]: ...
    def with_entities(self, *args: Any) -> Query[Any]: ...
    def all(self) -> List[T]: ...
    def first(self) -> Optional[T]: ...
    def count(self) -> int: ...
    @property
    def statement(self) -> Any: ...

class Session:
    def query(self, model: type) -> Query[Any]: ...

def selectinload(relationship: Any) -> Any: ...
def joinedload(relationship: Any) -> Any: ...