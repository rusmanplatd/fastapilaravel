# Type stubs for SQLAlchemy
from typing import Any, Dict, Optional, Type, TypeVar, Generic, Union, Callable
from typing_extensions import ParamSpec

T = TypeVar('T')
P = ParamSpec('P')

class Column:
    def __init__(
        self,
        type_: Any,
        *args: Any,
        primary_key: bool = ...,
        nullable: bool = ...,
        index: bool = ...,
        unique: bool = ...,
        default: Any = ...,
        server_default: Any = ...,
        onupdate: Any = ...,
        **kwargs: Any
    ) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __lt__(self, other: Any) -> Any: ...
    def __le__(self, other: Any) -> Any: ...
    def __gt__(self, other: Any) -> Any: ...
    def __ge__(self, other: Any) -> Any: ...
    def in_(self, values: Any) -> Any: ...
    def like(self, pattern: str) -> Any: ...
    def ilike(self, pattern: str) -> Any: ...
    def between(self, low: Any, high: Any) -> Any: ...
    def is_(self, value: Any) -> Any: ...
    def isnot(self, value: Any) -> Any: ...
    def asc(self) -> Any: ...
    def desc(self) -> Any: ...

class Integer: ...
class TypeEngine: ...

class String(TypeEngine):
    def __init__(self, length: Optional[int] = ...) -> None: ...

class Text(TypeEngine): ...
class Boolean(TypeEngine): ...
class DateTime(TypeEngine): ...

class ForeignKey:
    def __init__(
        self, 
        column: str, 
        ondelete: Optional[str] = ...,
        **kwargs: Any
    ) -> None: ...

class Table:
    def __init__(
        self,
        name: str,
        metadata: Any,
        *columns: Any,
        schema: Optional[str] = ...,
        **kwargs: Any
    ) -> None: ...
    
    @property
    def c(self) -> Any: ...

class Index:
    def __init__(
        self,
        name: str,
        *columns: Any,
        unique: bool = ...,
        **kwargs: Any
    ) -> None: ...

def create_engine(
    url: Union[str, Any],
    connect_args: Optional[Dict[str, Any]] = ...,
    **kwargs: Any
) -> Any: ...

def text(clause: str) -> Any: ...

class func:
    @staticmethod
    def now() -> Any: ...
    @staticmethod
    def count(*args: Any) -> Any: ...
    @staticmethod
    def extract(field: str, *args: Any) -> Any: ...
    @staticmethod
    def coalesce(*args: Any) -> Any: ...

class or_:
    def __init__(self, *clauses: Any) -> None: ...

class and_:
    def __init__(self, *clauses: Any) -> None: ...

def desc(column: Any) -> Any: ...
def asc(column: Any) -> Any: ...

# SQLAlchemy ORM related
from typing import Generator

class Session:
    def add(self, instance: Any) -> None: ...
    def commit(self) -> None: ...
    def rollback(self) -> None: ...
    def refresh(self, instance: Any) -> None: ...
    def delete(self, instance: Any) -> None: ...
    def close(self) -> None: ...
    def query(self, model: Type[T]) -> Any: ...

def sessionmaker(
    autocommit: bool = ...,
    autoflush: bool = ...,
    bind: Any = ...,
    **kwargs: Any
) -> Callable[[], Session]: ...

class SQLAlchemyError(Exception): ...

class IntegrityError(SQLAlchemyError): ...

class DeclarativeBase:
    metadata: Any

class Mapped(Generic[T]): ...

def relationship(
    argument: Union[str, Callable[[], Type[Any]]],
    secondary: Optional[Any] = ...,
    back_populates: Optional[str] = ...,
    **kwargs: Any
) -> Any: ...

def mapped_column(
    type_: Any = ...,
    *args: Any,
    primary_key: bool = ...,
    nullable: bool = ...,
    index: bool = ...,
    unique: bool = ...,
    default: Any = ...,
    server_default: Any = ...,
    onupdate: Any = ...,
    **kwargs: Any
) -> Any: ...

def inspect(subject: Any) -> Any: ...

class Engine:
    def execute(self, statement: Any, parameters: Any = None) -> Any: ...
    def connect(self) -> Connection: ...
    def table_names(self) -> list[str]: ...
    
class Connection:
    def execute(self, statement: Any, parameters: Any = None) -> CursorResult[Any]: ...
    def close(self) -> None: ...
    
class CursorResult(Generic[T]):
    def fetchone(self) -> Optional[T]: ...
    def fetchall(self) -> list[T]: ...
    def fetchmany(self, size: Optional[int] = None) -> list[T]: ...