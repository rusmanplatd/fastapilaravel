from typing import Any, Dict, List, Optional, Union, Callable, Type
from typing_extensions import TypeAlias
from starlette.websockets import WebSocket as StarletteWebSocket
from starlette.websockets import WebSocketDisconnect as StarletteWebSocketDisconnect
from starlette.datastructures import UploadFile as StarletteUploadFile

class HTTPException(Exception):
    def __init__(self, status_code: int, detail: Any = None, headers: Optional[Dict[str, Any]] = None) -> None: ...

class Depends:
    def __init__(self, dependency: Optional[Callable[..., Any]] = None, *, use_cache: bool = True) -> None: ...

class Request:
    def __init__(self, scope: Dict[str, Any], receive: Callable[[], Any] = None, send: Callable[[Any], Any] = None) -> None: ...
    @property
    def url(self) -> Any: ...

class Response:
    def __init__(self, content: Any = None, status_code: int = 200, headers: Optional[Dict[str, str]] = None) -> None: ...

class UploadFile(StarletteUploadFile):
    def __init__(self, file: Any, size: Optional[int] = None, filename: Optional[str] = None, headers: Optional[Dict[str, str]] = None) -> None: ...

def File(default: Any = ..., *, alias: Optional[str] = None, title: Optional[str] = None, description: Optional[str] = None, **extra: Any) -> Any: ...

def Form(default: Any = ..., *, alias: Optional[str] = None, title: Optional[str] = None, description: Optional[str] = None, **extra: Any) -> Any: ...

def Query(default: Any = ..., *, alias: Optional[str] = None, title: Optional[str] = None, description: Optional[str] = None, **extra: Any) -> Any: ...

class WebSocket(StarletteWebSocket):
    async def send_text(self, data: str) -> None: ...
    async def receive_text(self) -> str: ...
    async def accept(self, subprotocol: Optional[str] = None, headers: Optional[Dict[str, str]] = None) -> None: ...
    async def close(self, code: int = 1000, reason: Optional[str] = None) -> None: ...

class WebSocketDisconnect(StarletteWebSocketDisconnect):
    def __init__(self, code: int = 1000, reason: Optional[str] = None) -> None: ...

class APIRouter:
    def __init__(self, **kwargs: Any) -> None: ...
    def get(self, path: str, **kwargs: Any) -> Callable[..., Any]: ...
    def post(self, path: str, **kwargs: Any) -> Callable[..., Any]: ...
    def put(self, path: str, **kwargs: Any) -> Callable[..., Any]: ...
    def delete(self, path: str, **kwargs: Any) -> Callable[..., Any]: ...
    def patch(self, path: str, **kwargs: Any) -> Callable[..., Any]: ...
    def websocket(self, path: str, **kwargs: Any) -> Callable[..., Any]: ...

class FastAPI:
    def __init__(self, **kwargs: Any) -> None: ...
    def get(self, path: str, **kwargs: Any) -> Callable[..., Any]: ...
    def post(self, path: str, **kwargs: Any) -> Callable[..., Any]: ...
    def put(self, path: str, **kwargs: Any) -> Callable[..., Any]: ...
    def delete(self, path: str, **kwargs: Any) -> Callable[..., Any]: ...
    def patch(self, path: str, **kwargs: Any) -> Callable[..., Any]: ...
    def websocket(self, path: str, **kwargs: Any) -> Callable[..., Any]: ...

class status:
    HTTP_200_OK: int
    HTTP_201_CREATED: int
    HTTP_400_BAD_REQUEST: int
    HTTP_401_UNAUTHORIZED: int
    HTTP_403_FORBIDDEN: int
    HTTP_404_NOT_FOUND: int
    HTTP_500_INTERNAL_SERVER_ERROR: int